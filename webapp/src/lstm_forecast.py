import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers import Dense,Dropout
from keras.layers import LSTM
from keras.callbacks import EarlyStopping
from data_processing import transform, inverse_transform

last_used_model = None
last_used_data = None
past = 60

def create_model():
    regressor = Sequential()
    regressor.add(LSTM(units = 50, activation = 'relu', input_shape = (past,1)))
    regressor.add(Dropout(0.2))
    regressor.add(Dense(units = 1))
    regressor.compile(optimizer = 'adam', loss = 'mean_squared_error')
    return regressor


def reshape_data(data):
    X = []
    y = []
    for i in range(past,len(data)):
        X.append(data[i-past:i])
        y.append(data[i])
    
    X_shape = (len(X),len(X[0]),1)
    y_shape = (len(y),1)

    X = np.reshape(X,X_shape)
    y = np.reshape(y,y_shape)
    return X,y

def get_training_data(X,y,test_size=0.2):

    X_train, _, y_train, _ = train_test_split(X, y, test_size = test_size, random_state = 0)

    X_shape = (len(X_train),len(X_train[0]),1)
    y_shape = (len(y_train),1)

    X_train = np.reshape(X_train,X_shape)
    y_train = np.reshape(y_train,y_shape)

    return X_train, y_train

def train_model(data,regressor=None):
    if regressor==None:
        regressor = create_model()
    X,y = reshape_data(data)
    X_train,y_train = get_training_data(X,y)
    
    regressor.fit(X_train, y_train, callbacks=[EarlyStopping(monitor='loss', patience=20)], epochs = 100, verbose = 0)
    return regressor

def predict(regressor,data):
    X,_ = reshape_data(data)

    y_pred = regressor.predict(X)
    y_pred = np.reshape(y_pred,(len(y_pred)))

    y_pred = list(y_pred)
    
    # first_seq = list(np.reshape(X[0],(len(X[0]),)))
    # y_pred = first_seq + y_pred

    return y_pred

def forecast(regressor,prediction,days):
    output_prediction = prediction[:]
    for _ in range(days):
        inputs = np.reshape(output_prediction[-past:],(1,past,1))

        y_pred = regressor.predict(inputs)
        
        y_pred = np.reshape(y_pred,(len(y_pred),))
        output_prediction.append(y_pred[0])

    return output_prediction

def update(data,regressor):
    last_used_data = data[:]
    last_used_model = regressor


def lstm_forecast(data,days=7):
    if len(data)<=past:
        raise Exception("Not enough data!")
    
    data,sc = transform(data)

    if data==last_used_data:
        regressor = last_used_model
    else:
        print('Training started')
        regressor = train_model(data)
        update(data,regressor)
    
    print('Prediction started')
    prediction = predict(regressor,data)

    print('Forecasting started')
    prediction = forecast(regressor,prediction,days)

    prediction = inverse_transform(prediction,sc)

    return prediction

# if __name__ == "__main__": 

#     last_used_model = None
#     last_used_data = None
#     past = 60

#     data = [36481.0, 3872.0, 12440.0, 28517.0, 28099.0, 16329.0, 19289.0, 28562.0, 11161.0, 49903.0, 25540.0, 15458.0, 90170.0, 34540.0, 20115.0, 38486.0, 7833.0, 9482.0, 13668.0, 21003.0, 22307.0, 8267.0, 23311.0, 18300.0, 16827.0, 7220.0, 10877.0, 3107.0, 62346.0, 57553.0, 2937.0, 11175.0, 2638.0, 4759.0, 5797.0, 21121.0, 4766.0, 6259.0, 3828.0, 2393.0, 63168.0, 8059.0, 8824.0, 7318.0, 12215.0, 9291.0, 2846.0, 3873.0, 7207.0, 6224.0, 5467.0, 9889.0, 32390.0, 6391.0, 8830.0, 18410.0, 5052.0, 49644.0, 28261.0, 5726.0, 2450.0, 21850.0, 2993.0, 3931.0, 2859.0, 3717.0, 32795.0, 20314.0, 14915.0, 7079.0, 6438.0, 12666.0, 23518.0, 18218.0, 3448.0, 2007.0, 9028.0, 10450.0, 10707.0, 41271.0, 14253.0, 5923.0, 3963.0, 4842.0, 4721.0, 10283.0, 15197.0, 9025.0, 8219.0, 6222.0, 23756.0, 13468.0, 80974.0, 32237.0, 22127.0, 60080.0, 27118.0, 13210.0, 16060.0, 18793.0, 35221.0, 14160.0, 15574.0, 9897.0, 16783.0, 19279.0, 14509.0, 29761.0, 7904.0, 61243.0, 14801.0, 16536.0, 13024.0, 40373.0, 17943.0, 26892.0, 27719.0, 30212.0, 20095.0, 23580.0, 42667.0, 30111.0, 13039.0, 46381.0, 38180.0, 12835.0, 79738.0, 23216.0, 12148.0, 22653.0, 4824.0, 36583.0, 34196.0, 20807.0, 25176.0, 8641.0, 16317.0, 6820.0, 22897.0, 12934.0, 6004.0, 18018.0, 18570.0, 8426.0, 88138.0, 29036.0, 18372.0, 6180.0, 12342.0, 43048.0, 110009.0, 28477.0, 29724.0, 19265.0, 13437.0, 6923.0, 17463.0, 43406.0, 28053.0, 30404.0, 13730.0, 9995.0, 13243.0, 14176.0, 18269.0, 25040.0, 46702.0, 27295.0, 25103.0, 12674.0, 69608.0, 34191.0, 40963.0, 6347.0, 5576.0, 30698.0, 41074.0, 16692.0, 27723.0, 6897.0, 9890.0, 22452.0, 62106.0, 58160.0, 28809.0, 23581.0, 42066.0, 16696.0, 24761.0, 67924.0, 39727.0, 25180.0, 476122.0, 163064.0, 31028.0, 53250.0, 62520.0, 49605.0, 34151.0, 50406.0, 31919.0, 51840.0, 31617.0, 68500.0, 24646.0, 16419.0, 41722.0, 30591.0, 48567.0, 38137.0, 32730.0, 14582.0, 18118.0, 21632.0, 26354.0, 50686.0, 75319.0, 65020.0, 46084.0, 72178.0, 118275.0, 61737.0, 52588.0, 66031.0, 24024.0, 18653.0, 27048.0, 20821.0, 46978.0, 55782.0, 37675.0, 51319.0, 52016.0, 34583.0, 64511.0, 38638.0, 30597.0, 38592.0, 70706.0, 31125.0, 45978.0, 34138.0, 22055.0, 40898.0, 56633.0, 51756.0, 73981.0, 61216.0, 20433.0, 22074.0, 24713.0, 7740.0, 37746.0, 74427.0, 57134.0, 12292.0, 42042.0, 18654.0, 13948.0, 30224.0, 17026.0, 33279.0, 70925.0, 18859.0, 100042.0, 78926.0, 38668.0, 38698.0, 49323.0, 19432.0, 38105.0, 30945.0, 35784.0, 10650.0, 16619.0, 21894.0, 9872.0, 65267.0, 433915.0, 438038.0, 212237.0, 253836.0, 175228.0, 150387.0, 19402.0, 71279.0, 219806.0, 853784.0, 55260.0, 19499.0, 51370.0, 114970.0, 219943.0, 247610.0, 33110.0, 68225.0, 49989.0, 60921.0, 125567.0, 77625.0, 171179.0, 70867.0, 56432.0, 391719.0, 284640.0, 22393.0, 16879.0, 117029.0, 50013.0, 42607.0, 41460.0, 25203.0, 24935.0, 21374.0, 18189.0, 73562.0, 101679.0, 98805.0, 15234.0, 42461.0, 16734.0, 21168.0, 12903.0, 20133.0, 38272.0, 25182.0, 34134.0, 65314.0, 20750.0, 53818.0, 39034.0, 14056.0, 12015.0, 21194.0, 34668.0, 45165.0, 45486.0, 80102.0, 43193.0, 41010.0, 6825.0, 23179.0, 17153.0, 19482.0, 12728.0, 23705.0, 23787.0, 24103.0, 27765.0, 13102.0, 15214.0, 22939.0, 9094.0, 29752.0, 29316.0, 35626.0, 39312.0, 85358.0, 76844.0, 74246.0, 63908.0, 76664.0, 60650.0, 5102.0, 12441.0, 9391.0, 24636.0, 21349.0, 36542.0, 46142.0, 40361.0, 34428.0, 41918.0, 17360.0, 10569.0, 12972.0, 9316.0, 18112.0, 32202.0, 24368.0, 9170.0, 34631.0, 11105.0, 13618.0, 19299.0, 29321.0, 32290.0, 89429.0, 40983.0, 125394.0, 131693.0, 15064.0, 8660.0, 5276.0, 12081.0, 46553.0, 48406.0, 43591.0, 75786.0, 50083.0, 57950.0, 47080.0, 66212.0, 85452.0, 28970.0, 9386.0, 35041.0, 17098.0, 24823.0, 12466.0, 29132.0, 68394.0, 23032.0, 37662.0, 151703.0, 13619.0, 16565.0, 5583.0, 29858.0, 8033.0, 12344.0, 15821.0, 15891.0, 19766.0, 27834.0, 29287.0, 11467.0, 17706.0, 23595.0, 21214.0, 48324.0, 25115.0, 12031.0, 31756.0, 19532.0, 17951.0, 8992.0, 15249.0, 14209.0, 14016.0, 36653.0, 6734.0, 16755.0, 27204.0, 25422.0, 40904.0, 37612.0, 144134.0, 47707.0, 30900.0, 67864.0, 49493.0, 21134.0, 39590.0, 15421.0, 16971.0, 24120.0, 19234.0, 23625.0, 12084.0, 19293.0, 13099.0, 9535.0, 10605.0, 5462.0, 10198.0, 19887.0, 55423.0, 16285.0, 16724.0, 12608.0, 35360.0, 27083.0, 22312.0, 26083.0, 25855.0, 17245.0, 8829.0, 8817.0, 22449.0, 8450.0, 20128.0, 7541.0, 33114.0, 144275.0, 90435.0, 50878.0, 66007.0, 104891.0, 226128.0, 213343.0, 356983.0, 345146.0, 358096.0, 420112.0, 381898.0, 511196.0, 509690.0, 554336.0, 537826.0, 486809.0, 335544.0, 410994.0, 343542.0, 76165.0, 62236.0, 151766.0, 141995.0, 161177.0, 187447.0, 80619.0, 51802.0, 8937.0, 11292.0, 30678.0, 52122.0, 11155.0, 8309.0, 19375.0, 27160.0, 13998.0, 37202.0, 48531.0, 28040.0, 25094.0, 46337.0, 48425.0, 81903.0, 130883.0, 82921.0, 33475.0, 49313.0, 71455.0, 187791.0, 148002.0, 44074.0, 25538.0, 12123.0, 22605.0, 60720.0, 147749.0, 255124.0, 280856.0, 283559.0, 218040.0, 117706.0, 15963.0, 24088.0, 167284.0, 230586.0]

#     pred = lstm_forecast(data,50)

#     print(len(pred))
#     print(pred)
#     print(len(pred))